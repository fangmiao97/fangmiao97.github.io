<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>毕业设计参考文献记录🎓</title>
      <link href="/2019/03/19/graduationDesignReferences/"/>
      <url>/2019/03/19/graduationDesignReferences/</url>
      
        <content type="html"><![CDATA[<h2 id="实时流处理应用场景"><a href="#实时流处理应用场景" class="headerlink" title="实时流处理应用场景"></a>实时流处理应用场景</h2><ul><li><a href="http://new.gb.oversea.cnki.net/KXReader/Detail?dbcode=CJFD&amp;filename=DNZS201825112&amp;uid=WEEvREcwSlJHSldRa1Fhb09jT0pkRlg1TFVqTzAvOUVLVWZDZmNBOEF0az0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!" target="_blank" rel="noopener">Spark Streaming在实时计算中的应用研究</a>:延时限制在秒级的应用场景,电商实时营销。</li><li><a href="http://new.gb.oversea.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD201901&amp;filename=1018894622.nh&amp;uid=WEEvREcwSlJHSldRa1Fhb09jT0pkRlg1TFVqTzAvOUVLVWZDZmNBOEF0az0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;v=MDAwNDFyQ1VSTE9mWk9kbUZpRGhWNzdJVkYyNkZydXhHdGZPclpFYlBJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUY=" target="_blank" rel="noopener">基于Spark Streaming的实时日志分析与信息管理系统的设计与实现</a>:分析DDoS攻击。系统日志的信息安全审计</li><li><a href="http://new.gb.oversea.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD201801&amp;filename=1017292559.nh&amp;v=MTU5MjBlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSTE9mWk9kbUZ5amtWTHZMVkYyNkdiR3hITlRKcHBFYlBJUjg=&amp;uid=WEEvREcwSlJHSldRa1FhdkJkVG1CcDNRL2o5cjJMcDdKU2FGb00xSGNGND0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!" target="_blank" rel="noopener">基于海量网络日志数据的实时流处理系统的设计与实现</a>:可以参考这部分的绪论部分<h2 id="日志信息隐藏关系"><a href="#日志信息隐藏关系" class="headerlink" title="日志信息隐藏关系"></a>日志信息隐藏关系</h2></li></ul><h2 id="研究目的-出发点"><a href="#研究目的-出发点" class="headerlink" title="研究目的/出发点"></a>研究目的/出发点</h2><ul><li><a href="https://www.zhihu.com/question/20624296/answer/15731592" target="_blank" rel="noopener">互联网闭环</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕业设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中常用API</title>
      <link href="/2019/03/18/JavaUtilsAPI/"/>
      <url>/2019/03/18/JavaUtilsAPI/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动互联实验室-前端组-参考培训计划🖥（1期）</title>
      <link href="/2019/03/18/frontendstudy/"/>
      <url>/2019/03/18/frontendstudy/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识🚶"><a href="#基础知识🚶" class="headerlink" title="基础知识🚶"></a>基础知识🚶</h2><ul><li><a href="http://www.imooc.com/code/49" target="_blank" rel="noopener">HTML代码练习</a>(第4周-第6周）</li><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">JavaScript语言入门教程</a></li><li><a href="http://www.imooc.com/learn/36" target="_blank" rel="noopener">Js视频</a></li></ul><h2 id="进阶🏃"><a href="#进阶🏃" class="headerlink" title="进阶🏃"></a>进阶🏃</h2><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="https://www.imooc.com/learn/955" target="_blank" rel="noopener">ES6快速入门</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">React入门教程</a></li><li>使用React的网站：<ul><li><a href="http://www.facebook.com/" target="_blank" rel="noopener">Facebook</a></li><li><a href="http://instagram.com/" target="_blank" rel="noopener">Instagram</a></li><li><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></li></ul></li></ul><h2 id="React🚕"><a href="#React🚕" class="headerlink" title="React🚕"></a>React🚕</h2><ul><li><a href="https://juejin.im/post/59dcd87451882578c2084515" target="_blank" rel="noopener">从React脚手架工具学习React项目的最佳实践</a></li><li><a href="https://juejin.im/entry/5b3f3c82e51d45190905d3a2" target="_blank" rel="noopener">组件库（了解）</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html" target="_blank" rel="noopener">React 技术栈系列教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Websites Safari</title>
      <link href="/2019/03/18/websitesafari/"/>
      <url>/2019/03/18/websitesafari/</url>
      
        <content type="html"><![CDATA[<h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><ul><li><a href="http://scaffold.ant.design/#/" target="_blank" rel="noopener">antd脚手架市场</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于axios的CORS问题的解决</title>
      <link href="/2019/03/18/axioscorsquestions/"/>
      <url>/2019/03/18/axioscorsquestions/</url>
      
        <content type="html"><![CDATA[<h2 id="Axios基础"><a href="#Axios基础" class="headerlink" title="Axios基础"></a>Axios基础</h2><ul><li>参考网站<ul><li><a href="https://www.jianshu.com/p/7a9fbcbb1114" target="_blank" rel="noopener">中文文档</a></li><li><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">使用说明</a></li></ul></li><li>上下文知识<ul><li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise in ES6</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a> 同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据</li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a> 实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信</li></ul></li></ul><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Access to XMLHttpRequest at ‘<a href="http://localhost:8080/hello&#39;" target="_blank" rel="noopener">http://localhost:8080/hello&#39;</a> from origin ‘<a href="http://localhost:3000&#39;" target="_blank" rel="noopener">http://localhost:3000&#39;</a> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><a href="https://my.oschina.net/hccake/blog/886606" target="_blank" rel="noopener">Spring利用@CrossOrigin注解 实现 支持CORS跨域请求</a> 在controller类头部加入注释</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"*"</span>, maxAge = <span class="number">3600</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume使用interceptors向不同的Kafka Consumers发送基于Topic维度的信息</title>
      <link href="/2019/03/16/FluemToKafkaBaseOnDifferntTopic/"/>
      <url>/2019/03/16/FluemToKafkaBaseOnDifferntTopic/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li>后端接口通过log4j转发给flume的Event是直接发给avro source，之后要交给kafka sink供不同的应用处理。如果对于不同的topic都用一个agent处理感觉略尴尬（没有尝试），所以用一个avro source进行接收，用flume的interceptor进行按topic分流。</li></ul><h1 id="方案流程"><a href="#方案流程" class="headerlink" title="方案流程"></a>方案流程</h1><ul><li>前端<ul><li>向后端上传数据时，加入topic字段</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">"url/logtest"</span>, &#123;</span><br><span class="line">            params:&#123;</span><br><span class="line">                K_topic: <span class="string">'specialTopic'</span>,</span><br><span class="line">                contents: <span class="string">'contents'</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li>后端<ul><li>在log4j的logger.info中加入topic字段</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"topic:"</span> + k_topic + <span class="string">" "</span> + <span class="string">"contents:"</span>+ contents);</span><br></pre></td></tr></table></figure><ul><li>flume配置（部分）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#source interceptor</span><br><span class="line">agent1.sources.avro-source.interceptors=i1</span><br><span class="line">agent1.sources.avro-source.interceptors.i1.type=regex_extractor</span><br><span class="line">agent1.sources.avro-source.interceptors.i1.regex=topic:(.*?) contents:(.*?)</span><br><span class="line">agent1.sources.avro-source.interceptors.i1.serializers=s1 s2</span><br><span class="line">#agent1.sources.avro-source.interceptors.i1.serializers.s1.type=default</span><br><span class="line">agent1.sources.avro-source.interceptors.i1.serializers.s1.name=topic</span><br><span class="line">#agent1.sources.avro-source.interceptors.i1.serializers.s2.type=default</span><br><span class="line">agent1.sources.avro-source.interceptors.i1.serializers.s2.name=contents</span><br><span class="line"></span><br><span class="line">#define sink</span><br><span class="line">agent1.sinks.kafka-sink.type=org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">agent1.sinks.kafka-sink.topic = %&#123;topic&#125;</span><br></pre></td></tr></table></figure><ul><li>结果<br>不同的kafka Producer能够接收不同topic的埋点数据，之后的consumer也能消费到了</li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html#regex-extractor-interceptor" target="_blank" rel="noopener">regex-extractor-interceptor正则表达式interceptor</a></li><li><a href="http://lxw1234.com/archives/2015/11/543.htm" target="_blank" rel="noopener">interceptor</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发相关 </tag>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周记录📝（190316）</title>
      <link href="/2019/03/16/weeklyReport190316/"/>
      <url>/2019/03/16/weeklyReport190316/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wx1.sinaimg.cn/mw1024/6a49516fly1g14vxty5rbj21400u0e82.jpg" alt="学校的傍晚"></p><p>这一周将毕业设计的开头部分完成了链路打通，具体就是在前端埋点得到的数据能够在kafka中分topic消费。</p><p>其实这之间走了很多弯路，自己反复查资料才发现一个正确的方法。现在才意识到做项目需要一个指导老师的重要性，同样企业需要技术的布道师也是这个道理。</p><p>我的毕设是使用spark streaming进行网站流量的分析。其实对于毕设很尴尬的一点事，没有真实的业务数据，只能自己凭空制造。另外我觉得高校中的毕业设计，真的越来越水，就像是一个大一点的课程设计，自己独立完成的那种。</p><p>这一周我首先想完成通过自己在前端埋点，收集到数据，并能够给后面的业务流程使用。我的前端使用react，埋点的数据收集打算用flume收集。最开始的思路是使用flume的HTTPSource直接收集来自前端POST请求中的数据，可是通过查阅文档发现，无法完成。因为HTTPSource接受的需要是flume的Event对象，前端直接发来的数据不符合要求。所以说前端的任务只要完成原始数据收集的工作就可以了，其他必要的转换由后端完成。</p><p>还有一点就是，经别人提醒，如果说用flume直接收集网络上的数据还有安全的问题（见<a href="https://www.v2ex.com/t/543592#reply4" target="_blank" rel="noopener">V2ex帖子</a>）。所以有后端转发的必要。所以在这里我就有个疑惑，关于HTTPSource的使用场景到底是什么？</p><p>进过反复的尝试，确定了方案是：前端埋点采集到的数据由后端接受，并发送log4j日志给flume，再由flume的interceptor进行过滤（分流），分成不同的topic给kafka的消费者使用，之后就可以给spark streaming使用啦。(解决方案<a href="https://fangmiao97.github.io/2019/03/16/FluemToKafkaBaseOnDifferntTopic/" target="_blank" rel="noopener">见文章</a>)</p><p>不过现在遗留下的问题就是，前端使用axios出现跨域访问的问题。这个问题下周开始解决。下周要完成的任务就是把前端的框架搭好，开始学习spark streaming深入一点的东西，然后找需求。目前的需求太单薄了，不怎么丰富。</p><p>本周还做了点其他的事，总之效率没有那么高吧。这两天刷LeetCode也刷不起来，不知道为啥。所以这两天休息了一下，没刷。</p><p>感觉自己有的时候总被一些东西打扰，自己的控制力不够。另外看书的速度也挺慢的。看了名人传记，感觉厉害的人为何有那么多精力呢？</p><p>最近看到好玩的图，取名我的毕设，哈哈哈🤣<br><img src="https://wx2.sinaimg.cn/mw1024/6a49516fly1g14w7kwjt8j20j60n4dks.jpg" alt="我的毕设"></p>]]></content>
      
      
      <categories>
          
          <category> 每周记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题总结（持续更新）</title>
      <link href="/2019/03/15/MyLeetCodeSummarize/"/>
      <url>/2019/03/15/MyLeetCodeSummarize/</url>
      
        <content type="html"><![CDATA[<p>我的答案仓库地址：<a href="https://github.com/fangmiao97/MyLeetCode" target="_blank" rel="noopener">MyLeetCode</a></p><h2 id="Tree与迭代、动态规划"><a href="#Tree与迭代、动态规划" class="headerlink" title="Tree与迭代、动态规划"></a>Tree与迭代、动态规划</h2><ul><li><a href="https://leetcode.com/problems/maximum-binary-tree/" target="_blank" rel="noopener">Maximum Binary Tree</a><ul><li>思路：将创建最大二叉树，即根节点比所有叶子节点都大，的过程，分解成先寻找到当前数列中最大值，然后在创建左右最大子树的过程</li><li>退出情况是数列为一个数时返回null，即表示结束没有子树可以构造了</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TreeNode root = <span class="keyword">new</span> TreeNode(nums[max_i]);</span><br><span class="line">root.left = construct(nums, l, max_i);</span><br><span class="line">root.right = construct(nums, max_i + <span class="number">1</span>, r);</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode.com/problems/maximum-binary-tree-ii/" target="_blank" rel="noopener">Maximum Binary Tree II</a><ul><li>描述：在一棵现成的最大二叉树中，插入一个数，使得插入之后依然是最大二叉树</li><li>技巧点：比根节点小的数一律往根节点的右子树插。</li><li>思路：插入值与当前根节点的值比较，若大于根节点的值则创建节点，并将原根节点作为自己的左子结点，并返回新的根节点。否则的话插入值插入原根节点的右子树，并循环这个过程。若插入值比较到最后，即与null比较，则创建该节点并返回这个节点。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoMaxTree</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val&lt;val)&#123;</span><br><span class="line">            TreeNode head = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">            head.left = root;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        root.right = insertIntoMaxTree(root.right, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/" target="_blank" rel="noopener">Second Minimum Node In a Binary Tree</a><ul><li>需要注意的事，必须将所有的节点都遍历完全才能找到第二小的数字。因为有一个用例将第二小的数值藏在了最下面</li><li>采用DFS或BFS都可以。关键是判断第二小的时候，先要将第一小的数找到，如果之后有数字不是小于<strong>等于</strong>第一小的话，才可以比较是不是第二小。如果只是单纯的小于第一小，会让第二小也成为和第一小一样的数值。</li></ul></li><li>BFS常用结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;TreeNode&gt; a = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">a.offer(p);</span><br><span class="line"><span class="keyword">while</span> (!a.isEmpty())&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sz = a.size(); sz &gt; <span class="number">0</span>; --sz) &#123;</span><br><span class="line">        TreeNode n = a.poll();</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        a.offer(n.left);</span><br><span class="line">        a.offer(n.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="字节-位处理"><a href="#字节-位处理" class="headerlink" title="字节/位处理"></a>字节/位处理</h2><ul><li><a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="noopener">Reverse Integer</a><ul><li>java中不同数据类型的取值范围<ul><li>int 32</li><li>short 16</li><li>long 64</li><li>float 32</li><li>double 64</li></ul></li><li>本题中关于溢出可能的判断</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//正数溢出情况（2147483647）</span></span><br><span class="line"><span class="keyword">if</span> (rev &gt; Integer.MAX_VALUE/<span class="number">10</span> || (rev == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//负数（-2147483648）</span></span><br><span class="line"><span class="keyword">if</span> (rev &lt; Integer.MIN_VALUE/<span class="number">10</span> || (rev == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">if</span>((rev - pop) / <span class="number">10</span> != org) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//溢出的话肯定计算不出原来的数字了</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">Number of 1 Bits</a><ul><li>找一个int数的二进制中有多少个1，hamming weight</li><li>&amp; – 位与运算 | – 位或运算</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>((n &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                res++;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>; <span class="comment">//右移一位</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://zhuanlan.zhihu.com/p/30108890" target="_blank" rel="noopener">java中的移位操作符</a></p></li><li><p><a href="https://leetcode.com/problems/reverse-bits/" target="_blank" rel="noopener">Reverse Bits</a></p><ul><li>翻转32位比特值，依次移动每一位。将每次需要移动的比特放在最后一位。与1进行位与操作后，将这一位移动到正确的位置后，与结果进行位或操作。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            ans = ans | ((n &amp; <span class="number">1</span>) &lt;&lt; i);</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="noopener">Counting Bits</a></p><ul><li><p><strong>DP</strong> When it comes to even numbers, i.e, 2,4,6,8, their binary should be like ‘10’, ‘100’, ‘110’, ‘1000’<br>so one notable difference is their unit digit is always 0,<br>which means when you call &gt;&gt; 1- shift one bit rightwards<br>and also means dividing by 2- would cause no change to the count of ‘1’ in the binary string.</p><p>Vice versa, when you meet odd numbers, shifting one bit rightwards always eliminates one ‘1’ digit from original binary string,<br>that is why we should “compensate” one ‘1’ character to the count.</p><p>To sum up, when you meet even number the count of ‘1’s is always the same as its half number,<br>on the other hand, remember to plus one to the odds’ half number.</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=num; i++) f[i] = f[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> f;</span><br></pre></td></tr></table></figure><h2 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two Pointers"></a>Two Pointers</h2><ul><li><p><a href="https://chocoluffy.com/2016/12/04/浅析经典面试算法题-two-pointer的运用/" target="_blank" rel="noopener">浅析经典面试算法题-two pointer的运用</a></p></li><li><p>Two Sum</p><ul><li>integer array已经过排序</li><li>两个pointers一头一尾。那么sum只有三种可能：<ul><li>sum == target，则返回</li><li>sum &lt; target，头指针向后走一个</li><li>sum &gt; target，尾指针向前走一个</li></ul></li><li>循环条件，头 &lt; 尾</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = nums.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[low] + nums[high] == target)</span><br><span class="line">        <span class="comment">//do something;</span></span><br><span class="line">        <span class="comment">// low++ high--;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nums[low] + nums[high] &lt; target)</span><br><span class="line">        low++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        high--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3Sum<ul><li>先将数列排序，再固定第一个数字，从剩下的数列中用2 sum的方法找。</li><li>注意一些要过滤的条件：<ul><li>第一个数字在移动的过程中，如果与前一个一样的话，就再移一下</li><li>low和high移动的道理也一样</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">       Arrays.sort(nums);</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span>(i == <span class="number">0</span> || nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">               <span class="keyword">int</span> low = i + <span class="number">1</span>;</span><br><span class="line">               <span class="keyword">int</span> high = nums.length - <span class="number">1</span>;</span><br><span class="line">               <span class="keyword">int</span> remain = <span class="number">0</span> - nums[i];</span><br><span class="line">               <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">                   <span class="keyword">if</span>(nums[low] + nums[high] == remain) &#123;</span><br><span class="line">                       res.add(Arrays.asList(nums[i], nums[low], nums[high]));</span><br><span class="line">                       <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low + <span class="number">1</span>] == nums[low])</span><br><span class="line">                           low++;</span><br><span class="line">                       <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high - <span class="number">1</span>] == nums[high])</span><br><span class="line">                           high--;</span><br><span class="line">                       low++;</span><br><span class="line">                       high--;</span><br><span class="line">                   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[low] + nums[high] &lt; remain)</span><br><span class="line">                       low++;</span><br><span class="line">                   <span class="keyword">else</span></span><br><span class="line">                       high--;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>3Sum closest<ul><li>找最接近的sum（也可能相等）</li><li>增加判断条件Math.abs小的话，就要更新。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发🚀</title>
      <link href="/2019/03/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E6%84%8F%E8%A7%81/"/>
      <url>/2019/03/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E6%84%8F%E8%A7%81/</url>
      
        <content type="html"><![CDATA[<h2 id="布局样式📱"><a href="#布局样式📱" class="headerlink" title="布局样式📱"></a>布局样式📱</h2><ul><li><a href="https://www.imooc.com/learn/974" target="_blank" rel="noopener">入门教程视频</a></li><li><a href="http://www.imooc.com/code/49" target="_blank" rel="noopener">基础代码教程</a></li><li>相关实用网站<ul><li><a href="http://www.runoob.com/css/css-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/file.html#wxml-%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener">WXML与WXSS</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html" target="_blank" rel="noopener">WXSS主要注意尺寸单位</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/" target="_blank" rel="noopener">小程序的基本组件</a></li></ul></li></ul><h2 id="逻辑🗯"><a href="#逻辑🗯" class="headerlink" title="逻辑🗯"></a>逻辑🗯</h2><ul><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/000aa057ca0a88dcd938b4d6656813" target="_blank" rel="noopener">PWA</a>(了解）</li><li><a href="https://www.v2ex.com/t/427255" target="_blank" rel="noopener">关于HTML5/小程序的产生</a>(了解）</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/file.html#js-%E4%BA%A4%E4%BA%92%E9%80%BB%E8%BE%91" target="_blank" rel="noopener">JS逻辑交互</a></li><li>相关实用网站<ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/framework.html#api" target="_blank" rel="noopener">小程序的API</a></li><li><a href="http://www.runoob.com/js/js-tutorial.html" target="_blank" rel="noopener">JavaScript</a></li><li><a href="http://www.runoob.com/json/json-tutorial.html" target="_blank" rel="noopener">JSON教程</a></li></ul></li></ul><h2 id="其他实用网站🕸"><a href="#其他实用网站🕸" class="headerlink" title="其他实用网站🕸"></a>其他实用网站🕸</h2><ul><li><a href="https://developers.weixin.qq.com/" target="_blank" rel="noopener">官方社区</a>:有的坑可能别人已经踩过，可以搜索一下</li><li><a href="https://minapp.com/miniapp/" target="_blank" rel="noopener">知晓程序</a>：可以看看别人产品的想法和思路</li><li><a href="https://tencent.github.io/wepy/" target="_blank" rel="noopener">WePY</a>：开发小程序的一个框架。建议看看就好，还是以原生开发为主。等原生上手后再看看框架。</li><li><a href="https://github.com/Shincey/HFUTSZK" target="_blank" rel="noopener">工大思政课</a>:无网络交互，可以独立开发完成。</li><li><a href="https://github.com/fangmiao97/AISmallTribe-weixinMiniProgram" target="_blank" rel="noopener">AI小部落</a>：js逻辑中有网络交互，可以做参考。</li><li>各种css样式配置web工具<ul><li><a href="https://www.html.cn/tool/css3Preview/Box-Shadow.html" target="_blank" rel="noopener">box、卡片的阴影效果</a></li><li>……</li></ul></li></ul><h2 id="建议🍻"><a href="#建议🍻" class="headerlink" title="建议🍻"></a>建议🍻</h2><ul><li>先学习基础<strong>HTML/CSS/JavaScript</strong>，不用特别抓细节，但是要知晓常见用法</li><li>理清三个方面：<ul><li>如何布局、添加样式</li><li>逻辑层与 ui 层如何交互，或者说如何用代码操控 ui 组件</li><li>如何处理用户的交互动作</li></ul></li><li>先从简单的功能开始开发，如，点击按钮显示图片文本。再逐渐复杂逻辑</li><li>小程序推荐用原生开发，先不要用框架</li><li>看官方文档，也要结合搜索引擎。因为微信的官方文档，有坑</li><li>每天新增一行代码都是进步😃加油！</li><li>逐渐理解<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" target="_blank" rel="noopener">生命周期</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 开发相关 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
